/*
Project Euler Problem #12:
	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	Let us list the factors of the first seven triangle numbers:
		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.
	What is the value of the first triangle number to have over five hundred divisors?

My Solution:
	I extended this problem to a more general approach. The code below will find the first triangle number
	that has at least n distinct divisors.

- Nathan Marianvosky
*/


#include <iostream>
#include <string>
using namespace std;


//Checks whether or not a given string is an integer or not
bool is_number(const string &s) {
	string::const_iterator it = s.begin();
	while(it != s.end() && isdigit(*it)) {
		++it;
	}
	return (!s.empty()) && (it == s.end());
}


//Asks the user for the input on what value N should be and makes sure that N is an integer
int find_num_of_divisors() {
	int N = 0;
	string tmp;
	cout << "This code will find the first triangle number to have N divisors. What would you like N to be?" << endl;
	cin >> tmp;
	while(!(is_number(tmp)) || (stoi(tmp) == 0)) {
		cout << "Please choose an integer value such that N > 0!" << endl;
		tmp = "";
		cin >> tmp;
	}
	N = stoi(tmp);
	return N;
}


//Finds the number of divisors a given number has
int find_num_of_divisors(int num) {
	int num_of_divisors = 1;
    int exponent = 1;
    int i = 2;
    while(i <= num) {
        if(num % i == 0) {   
            exponent++; 
            num /= i;
        }
        else {
            num_of_divisors *= exponent;
            exponent = 1;
            i++;
        }
    }
    num_of_divisors *= exponent;
    return num_of_divisors;
}


//Finds the triangle number that has at least n distinct divisors
void find_num(int num_of_divisors) {
	int position = 1;
	int sum = 1;
	while(true) {
		if(find_num_of_divisors(sum) >= num_of_divisors) { break; }
		position++;
		sum += position;
	}
	cout << "The first value to have at least " << num_of_divisors << " distinct divisors is: " << sum << endl;
}


int main() {
	int num_of_divisors = 0;
	num_of_divisors = find_num_of_divisors();
	find_num(num_of_divisors);
	return 0;
}