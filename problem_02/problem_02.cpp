/*
Project Euler Problem #2:
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
									1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
My Solution:
	Find the sum of the even valued terms in the Fibonacci sequence whose value does not exceed some input N.
*/


#include <iostream>
#include <vector>
#include <cmath>
using namespace std;


class FibonacciGenerator {
public:
  FibonacciGenerator() : previous(0), next(1) {}
  int operator()() {
    int tmp = previous + next;
    previous = next;
    next = tmp;
    return previous;
  }
private:
  int previous;
  int next;
};


//Computes the sum of all even Fibonacci numbers less than N
int findSum(int N) {
	int sum = 0;
	FibonacciGenerator chain;
	for(int i = chain(); i < N; i = chain()) {
    	if( i % 2 == 0 ) sum += i;
  	}
  	return sum; 
}


//Ask for the value of N
int findN() {
	int N = 0;
	cout << "What would you like the value of N to be?" << endl;
	cin >> N;
	return N;
}


//Print out the sum
void printSum(int N, int sum) {
	cout << "The sum of all even Fibonacci numbers less than " << N << " is:" << endl;
	cout << sum << endl;
}


int main() {
	int N = 0;
	int sum = 0;
	N = findN();
	sum = findSum(N);
	printSum(N, sum);
	return 0;
}